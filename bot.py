import os
import io
import logging
import requests
from flask import Flask, request
import telebot
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Pillow
try:
    from PIL import Image, ImageOps, ImageFilter, ImageEnhance
    PILLOW_AVAILABLE = True
    logger.info("‚úÖ Pillow is available")
except ImportError:
    PILLOW_AVAILABLE = False
    logger.warning("‚ùå Pillow not available")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤
user_stickerpacks = {}

def remove_background_simple(image):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ - –¥–µ–ª–∞–µ—Ç –±–µ–ª—ã–π/—Å–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º"""
    if image.mode != 'RGBA':
        image = image.convert('RGBA')
    
    datas = image.getdata()
    new_data = []
    
    for item in datas:
        # –î–µ–ª–∞–µ–º –±–µ–ª—ã–π –∏ —Å–≤–µ—Ç–ª—ã–µ —Ü–≤–µ—Ç–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏
        if item[0] > 200 and item[1] > 200 and item[2] > 200:
            new_data.append((255, 255, 255, 0))  # –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
        else:
            new_data.append(item)
    
    image.putdata(new_data)
    return image

def create_sticker_image(photo_data):
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º"""
    if not PILLOW_AVAILABLE:
        raise Exception("Pillow not installed")
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = Image.open(io.BytesIO(photo_data)).convert('RGBA')
    
    # –£–¥–∞–ª—è–µ–º —Ñ–æ–Ω (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    image = remove_background_simple(image)
    
    # –°–æ–∑–¥–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 512x512
    target_size = 512
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
    sticker = Image.new('RGBA', (target_size, target_size), (255, 255, 255, 0))
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á—Ç–æ–±—ã –≤–ø–∏—Å–∞—Ç—å –≤ 512x512
    width, height = image.size
    scale = min(target_size / width, target_size / height) * 0.8  # –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
    
    new_width = int(width * scale)
    new_height = int(height * scale)
    
    resized_image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)
    
    # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
    x = (target_size - new_width) // 2
    y = (target_size - new_height) // 2
    
    # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
    sticker.paste(resized_image, (x, y), resized_image)
    
    return sticker

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üì∏ –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä'))
    markup.add(types.KeyboardButton('üìö –ú–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫'))
    markup.add(types.KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å'))
    
    bot.reply_to(message,
        "üé® *–ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤*\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫!\n\n"
        "‚ú® *–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:*\n"
        "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä –∏–∑ —Ñ–æ—Ç–æ\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–≤–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫\n"
        "‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏\n\n"
        "–ù–∞—á–Ω–∏ —Å –∫–Ω–æ–ø–∫–∏ *–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä*!",
        parse_mode='Markdown',
        reply_markup=markup
    )

@bot.message_handler(commands=['help'])
def help_cmd(message):
    bot.reply_to(message,
        "ü§ñ *–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫:*\n\n"
        "1. –ù–∞–∂–º–∏ *–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä*\n"
        "2. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å —á–µ—Ç–∫–∏–º –æ–±—ä–µ–∫—Ç–æ–º\n"
        "3. –ü–æ–ª—É—á–∏ —Å—Ç–∏–∫–µ—Ä —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º\n"
        "4. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–∞–π–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞\n\n"
        "üìù *–°–æ–≤–µ—Ç—ã –¥–ª—è —Ñ–æ—Ç–æ:*\n"
        "‚Ä¢ –û–±—ä–µ–∫—Ç –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ\n"
        "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
        "‚Ä¢ –ß–µ—Ç–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã\n"
        "‚Ä¢ –û–±—ä–µ–∫—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞–¥—Ä–∞",
        parse_mode='Markdown'
    )

@bot.message_handler(commands=['createsticker'])
def create_sticker_cmd(message):
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞! üì∑")

@bot.message_handler(func=lambda message: message.text == 'üì∏ –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä')
def make_sticker(message):
    bot.reply_to(message, 
        "üì∏ *–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞*\n\n"
        "–õ—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–æ–π–¥—É—Ç:\n"
        "‚Ä¢ –§–æ—Ç–æ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ\n"
        "‚Ä¢ –°–µ–ª—Ñ–∏ —Å —Ö–æ—Ä–æ—à–∏–º —Å–≤–µ—Ç–æ–º\n"  
        "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
        "‚Ä¢ –ö–∞—Ä—Ç–∏–Ω–∫–∏ —Å —á–µ—Ç–∫–∏–º–∏ –∫—Ä–∞—è–º–∏",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: message.text == 'üìö –ú–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫')
def my_stickerpack(message):
    bot.reply_to(message,
        "üìö *–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞*\n\n"
        "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –≤ Telegram:\n\n"
        "1. –ù–∞–∂–º–∏ *–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä*\n"
        "2. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ\n"
        "3. –°–æ—Ö—Ä–∞–Ω–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π PNG-—Ñ–∞–π–ª\n"
        "4. –ù–∞–ø–∏—à–∏ @Stickers\n"
        "5. –í—ã–±–µ—Ä–∏ /newpack\n"
        "6. –ó–∞–≥—Ä—É–∑–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ @Stickers –±–æ—Ç–∞!",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
def show_help(message):
    help_cmd(message)

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        bot.reply_to(message, "üîÑ –°–æ–∑–¥–∞—é —Å—Ç–∏–∫–µ—Ä —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        if PILLOW_AVAILABLE:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–∫–µ—Ä —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
            sticker_image = create_sticker_image(downloaded_file)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG
            output = io.BytesIO()
            sticker_image.save(output, format='PNG', optimize=True)
            output.seek(0)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
            bot.send_document(
                message.chat.id, 
                output, 
                visible_file_name='sticker.png',
                caption="‚úÖ *–°—Ç–∏–∫–µ—Ä –≥–æ—Ç–æ–≤!*\n\n"
                       "üìù *–ß—Ç–æ –¥–∞–ª—å—à–µ:*\n"
                       "1. –°–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª\n"
                       "2. –ù–∞–ø–∏—à–∏ @Stickers –≤ Telegram\n" 
                       "3. –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫\n"
                       "4. –ó–∞–≥—Ä—É–∑–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫–∞–∫ —Å—Ç–∏–∫–µ—Ä\n\n"
                       "‚ú® –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä!",
                parse_mode='Markdown'
            )
            
        else:
            # Pillow –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            bot.reply_to(message,
                "‚ùå *–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω*\n\n"
                "–í–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã...",
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error creating sticker: {e}")
        bot.reply_to(message,
            "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π:\n"
            "‚Ä¢ –§–æ—Ç–æ –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ\n" 
            "‚Ä¢ –ë–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            "‚Ä¢ –î—Ä—É–≥–æ–π —Ä–∞–∫—É—Ä—Å\n\n"
            "–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!",
            parse_mode='Markdown'
        )

@bot.message_handler(func=lambda message: True)
def echo(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üì∏ –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä'))
    markup.add(types.KeyboardButton('üìö –ú–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫'))
    
    bot.reply_to(message,
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=markup
    )

# –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.route('/webhook/' + TOKEN, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK', 200
    return 'Error', 403

@app.route('/')
def home():
    return "ü§ñ Sticker Bot - Create custom sticker packs!"

@app.route('/health')
def health():
    return "OK"

if __name__ == '__main__':
    print("üöÄ Starting Sticker Pack Bot...")
    print(f"üì¶ Pillow available: {PILLOW_AVAILABLE}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    render_url = os.getenv('RENDER_EXTERNAL_URL')
    if render_url:
        webhook_url = f"{render_url}/webhook/{TOKEN}"
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        print(f"‚úÖ Webhook set to: {webhook_url}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    port = int(os.getenv('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
