import os
import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not API_TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer(
        "üé® –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –∏ —è –ø–æ–º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –∏–∑ –Ω–µ–≥–æ —Å—Ç–∏–∫–µ—Ä!",
        reply_markup=get_keyboard()
    )

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.answer(
        "ü§ñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Ñ–æ—Ç–æ\n"
        "2. –Ø –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ\n"
        "3. –¢—ã –ø–æ–ª—É—á–∏—à—å –≥–æ—Ç–æ–≤—ã–π PNG —Ñ–∞–π–ª\n\n"
        "–ü–æ–∫–∞ —á—Ç–æ —è –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è—é —Ñ–æ—Ç–æ. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–ª—é –æ–±—Ä–∞–±–æ—Ç–∫—É!",
        reply_markup=get_keyboard()
    )

@dp.message_handler(lambda message: message.text == "üé® –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä")
async def create_sticker(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞! üì∑")

@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    await help_command(message)

@dp.message_handler(content_types=['photo'])
async def handle_photo(message: types.Message):
    try:
        await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")
        
        # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        
        await message.answer(
            f"‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n"
            f"–†–∞–∑–º–µ—Ä: {photo.width}x{photo.height}\n"
            f"ID —Ñ–∞–π–ª–∞: {file_info.file_id}\n\n"
            f"–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤! üé®"
        )
        
    except Exception as e:
        logger.error(f"Error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")

@dp.message_handler()
async def echo_message(message: types.Message):
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!",
        reply_markup=get_keyboard()
    )

if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    executor.start_polling(dp, skip_updates=True)
