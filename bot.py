import os
import io
import logging
from flask import Flask
import telebot
from PIL import Image, ImageFilter, ImageEnhance, ImageOps

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Sticker Bot is running!"

@app.route('/health')
def health():
    return "OK"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∏–ª–µ–π
def create_style_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton('üé® –ú—É–ª—å—Ç—è—à–Ω—ã–π')
    btn2 = telebot.types.KeyboardButton('üëæ –ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç')
    btn3 = telebot.types.KeyboardButton('üåà –ö–æ–Ω—Ç—É—Ä—ã')
    btn4 = telebot.types.KeyboardButton('üî• –í–∏–Ω—Ç–∞–∂–Ω—ã–π')
    btn5 = telebot.types.KeyboardButton('‚ö™ –ë–µ–∑ —Ñ–æ–Ω–∞')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, 
        "üéâ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤!\n\n"
        "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ:",
        reply_markup=create_style_keyboard()
    )

@bot.message_handler(commands=['help'])
def help_cmd(message):
    bot.reply_to(message,
        "ü§ñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "1. –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏–∑ –∫–Ω–æ–ø–æ–∫\n"
        "2. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ\n"
        "3. –ü–æ–ª—É—á–∏ —Å—Ç–∏–∫–µ—Ä!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏:\n"
        "üé® –ú—É–ª—å—Ç—è—à–Ω—ã–π - —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞\n"
        "üëæ –ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç - —Ä–µ—Ç—Ä–æ —Å—Ç–∏–ª—å\n"
        "üåà –ö–æ–Ω—Ç—É—Ä—ã - –≤—ã–¥–µ–ª—è–µ—Ç –∫—Ä–∞—è\n"
        "üî• –í–∏–Ω—Ç–∞–∂–Ω—ã–π - —Å—Ç–∞—Ä–∏–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç\n"
        "‚ö™ –ë–µ–∑ —Ñ–æ–Ω–∞ - –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω"
    )

@bot.message_handler(func=lambda message: message.text in ['üé® –ú—É–ª—å—Ç—è—à–Ω—ã–π', 'üëæ –ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç', 'üåà –ö–æ–Ω—Ç—É—Ä—ã', 'üî• –í–∏–Ω—Ç–∞–∂–Ω—ã–π', '‚ö™ –ë–µ–∑ —Ñ–æ–Ω–∞'])
def set_style(message):
    bot.reply_to(message, f"–í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {message.text} üì∑\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ!")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    bot.register_next_step_handler(message, process_photo_with_style, message.text)

def process_photo_with_style(message, style):
    if not message.photo:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ!")
        return
    
    try:
        bot.reply_to(message, "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(io.BytesIO(downloaded_file)).convert('RGB')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ
        if style == 'üé® –ú—É–ª—å—Ç—è—à–Ω—ã–π':
            result = apply_cartoon_style(image)
        elif style == 'üëæ –ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç':
            result = apply_pixel_style(image)
        elif style == 'üåà –ö–æ–Ω—Ç—É—Ä—ã':
            result = apply_outline_style(image)
        elif style == 'üî• –í–∏–Ω—Ç–∞–∂–Ω—ã–π':
            result = apply_vintage_style(image)
        elif style == '‚ö™ –ë–µ–∑ —Ñ–æ–Ω–∞':
            result = remove_background_simple(image)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output = io.BytesIO()
        result.save(output, format='PNG')
        output.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.send_document(message.chat.id, output, visible_file_name='sticker.png')
        bot.reply_to(message, f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°—Ç–∏–ª—å: {style}")
        
    except Exception as e:
        logger.error(f"Error: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    bot.reply_to(message, 
        "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
        reply_markup=create_style_keyboard()
    )

@bot.message_handler(func=lambda message: True)
def echo(message):
    bot.reply_to(message, 
        "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞! üì∑",
        reply_markup=create_style_keyboard()
    )

# –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def apply_cartoon_style(image):
    """–ú—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å"""
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
    enhancer = ImageEnhance.Color(image)
    saturated = enhancer.enhance(1.5)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
    contrast_enhancer = ImageEnhance.Contrast(saturated)
    result = contrast_enhancer.enhance(1.3)
    
    return result

def apply_pixel_style(image):
    """–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç —Å—Ç–∏–ª—å"""
    # –£–º–µ–Ω—å—à–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    small_size = (100, 100)
    pixelated = image.resize(small_size, Image.NEAREST)
    result = pixelated.resize(image.size, Image.NEAREST)
    
    return result

def apply_outline_style(image):
    """–°—Ç–∏–ª—å —Å –∫–æ–Ω—Ç—É—Ä–∞–º–∏"""
    # –ù–∞—Ö–æ–¥–∏–º –∫—Ä–∞—è
    edges = image.filter(ImageFilter.FIND_EDGES)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç –∫—Ä–∞–µ–≤
    enhancer = ImageEnhance.Contrast(edges)
    strong_edges = enhancer.enhance(3.0)
    
    # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª
    result = Image.blend(image, strong_edges, 0.3)
    
    return result

def apply_vintage_style(image):
    """–í–∏–Ω—Ç–∞–∂–Ω—ã–π —Å—Ç–∏–ª—å"""
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ø–∏—é
    sepia = image.convert('RGB')
    width, height = sepia.size
    pixels = sepia.load()
    
    for py in range(height):
        for px in range(width):
            r, g, b = sepia.getpixel((px, py))
            tr = int(0.393 * r + 0.769 * g + 0.189 * b)
            tg = int(0.349 * r + 0.686 * g + 0.168 * b)
            tb = int(0.272 * r + 0.534 * g + 0.131 * b)
            pixels[px, py] = (min(255, tr), min(255, tg), min(255, tb))
    
    return sepia

def remove_background_simple(image):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞"""
    if image.mode != 'RGBA':
        image = image.convert('RGBA')
    
    datas = image.getdata()
    new_data = []
    
    for item in datas:
        # –î–µ–ª–∞–µ–º —Å–≤–µ—Ç–ª—ã–µ —Ü–≤–µ—Ç–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏
        if item[0] > 200 and item[1] > 200 and item[2] > 200:
            new_data.append((255, 255, 255, 0))
        else:
            new_data.append(item)
    
    image.putdata(new_data)
    return image

if __name__ == '__main__':
    print("üöÄ Starting bot with sticker functionality...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    import threading
    def run_web():
        port = int(os.getenv('PORT', 10000))
        app.run(host='0.0.0.0', port=port, debug=False)
    
    web_thread = threading.Thread(target=run_web, daemon=True)
    web_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        print("ü§ñ Starting Telegram bot...")
        bot.infinity_polling()
    except Exception as e:
        print(f"‚ùå Bot error: {e}")
