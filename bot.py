import os
import io
import logging
from flask import Flask, request
import telebot
from telebot import types
import random
import string

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Pillow
try:
    from PIL import Image, ImageOps, ImageFilter
    PILLOW_AVAILABLE = True
    logger.info("‚úÖ Pillow is available")
except ImportError:
    PILLOW_AVAILABLE = False
    logger.warning("‚ùå Pillow not available")

def create_sticker_image(photo_data, style='simple'):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä 512x512 —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏"""
    if not PILLOW_AVAILABLE:
        raise Exception("Pillow not installed")
    
    image = Image.open(io.BytesIO(photo_data)).convert('RGBA')
    target_size = 512
    
    # –°–æ–∑–¥–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    width, height = image.size
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤–ø–∏—Å—ã–≤–∞–Ω–∏—è
    scale = min(target_size / width, target_size / height) * 0.9  # –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
    new_width = int(width * scale)
    new_height = int(height * scale)
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
    resized = image.resize((new_width, new_height), Image.Resampling.LANCZOS)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω 512x512
    sticker = Image.new('RGBA', (target_size, target_size), (255, 255, 255, 0))
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    x = (target_size - new_width) // 2
    y = (target_size - new_height) // 2
    
    # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
    sticker.paste(resized, (x, y), resized)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
    if style == 'cartoon':
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º—É–ª—å—Ç—è—à–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        from PIL import ImageEnhance
        enhancer = ImageEnhance.Color(sticker)
        sticker = enhancer.enhance(1.3)
        sticker = sticker.filter(ImageFilter.SMOOTH_MORE)
    elif style == 'outline':
        # –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ç—É—Ä–æ–≤
        edges = sticker.filter(ImageFilter.FIND_EDGES)
        sticker = Image.blend(sticker, edges, 0.1)
    
    return sticker

def remove_background_simple(image):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞"""
    if image.mode != 'RGBA':
        image = image.convert('RGBA')
    
    datas = image.getdata()
    new_data = []
    
    for item in datas:
        # –î–µ–ª–∞–µ–º —Å–≤–µ—Ç–ª—ã–µ —Ü–≤–µ—Ç–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏
        if item[0] > 200 and item[1] > 200 and item[2] > 200:
            new_data.append((255, 255, 255, 0))
        else:
            new_data.append(item)
    
    image.putdata(new_data)
    return image

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üé® –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä'))
    markup.add(types.KeyboardButton('üìö –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤ Telegram'))
    markup.add(types.KeyboardButton('‚ú® –°—Ç–∏–ª–∏'))
    
    bot.reply_to(message,
        "üéâ *–ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤*\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –∫—Ä—É—Ç—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ —Ñ–æ—Ç–æ!\n\n"
        "‚ú® *–ß—Ç–æ —è —É–º–µ—é:*\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç–∏–∫–µ—Ä—ã 512x512 –ø–∏–∫—Å–µ–ª–µ–π\n"
        "‚Ä¢ –£–±–∏—Ä–∞—Ç—å —Ñ–æ–Ω (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)\n"
        "‚Ä¢ –ü—Ä–∏–º–µ–Ω—è—Ç—å —Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏\n"
        "‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ PNG –¥–ª—è Telegram\n\n"
        "–ù–∞–∂–º–∏ *–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä* –∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ! üì∑",
        parse_mode='Markdown',
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == 'üé® –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä')
def create_sticker(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚ö™ –ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∏–∫–µ—Ä'))
    markup.add(types.KeyboardButton('üé® –ú—É–ª—å—Ç—è—à–Ω—ã–π'))
    markup.add(types.KeyboardButton('üåà –° –∫–æ–Ω—Ç—É—Ä–∞–º–∏'))
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
    
    bot.reply_to(message,
        "üé® *–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞:*\n\n"
        "‚ö™ *–ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∏–∫–µ—Ä* - —á–∏—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "üé® *–ú—É–ª—å—Ç—è—à–Ω—ã–π* - —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞, –º—É–ª—å—Ç—è—à–Ω—ã–π –≤–∏–¥\n"
        "üåà *–° –∫–æ–Ω—Ç—É—Ä–∞–º–∏* - –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –∫—Ä–∞—è\n\n"
        "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ!",
        parse_mode='Markdown',
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == 'üìö –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤ Telegram')
def how_to_add(message):
    bot.reply_to(message,
        "üìö *–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã –≤ Telegram*\n\n"
        "1. *–°–æ–∑–¥–∞–π —Å—Ç–∏–∫–µ—Ä* —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞\n"
        "2. *–°–æ—Ö—Ä–∞–Ω–∏* –ø–æ–ª—É—á–µ–Ω–Ω—ã–π PNG-—Ñ–∞–π–ª\n"
        "3. *–ù–∞–ø–∏—à–∏* @Stickers –±–æ—Ç—É\n"
        "4. *–í—ã–±–µ—Ä–∏* /newpack\n"
        "5. *–ü—Ä–∏–¥—É–º–∞–π* –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞\n"
        "6. *–ó–∞–≥—Ä—É–∑–∏* —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ PNG-—Ñ–∞–π–ª—ã\n"
        "7. *–î–æ–±–∞–≤—å* —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞\n"
        "8. *–û—Ç–ø—Ä–∞–≤—å* /publish —á—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å\n"
        "9. *–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!* –¢–≤–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –≥–æ—Ç–æ–≤! üéâ\n\n"
        "‚ú® *–°–æ–≤–µ—Ç:* –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 120 —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –æ–¥–∏–Ω –ø–∞–∫!",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: message.text == '‚ú® –°—Ç–∏–ª–∏')
def show_styles(message):
    bot.reply_to(message,
        "‚ú® *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏:*\n\n"
        "‚ö™ *–ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∏–∫–µ—Ä*\n"
        "‚Ä¢ –ß–∏—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω\n"
        "‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —á–µ—Ç–∫–∏—Ö —Ñ–æ—Ç–æ\n\n"
        "üé® *–ú—É–ª—å—Ç—è—à–Ω—ã–π*\n"
        "‚Ä¢ –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞\n"
        "‚Ä¢ –ú—è–≥–∫–∏–µ –∫—Ä–∞—è\n"
        "‚Ä¢ –í–µ—Å–µ–ª—ã–π –≤–∏–¥\n\n"
        "üåà *–° –∫–æ–Ω—Ç—É—Ä–∞–º–∏*\n"
        "‚Ä¢ –ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–µ –∫—Ä–∞—è\n"
        "‚Ä¢ –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç\n"
        "‚Ä¢ –î–ª—è –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ\n\n"
        "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π! üé®",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
def back_to_main(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üé® –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä'))
    markup.add(types.KeyboardButton('üìö –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤ Telegram'))
    
    bot.reply_to(message, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
user_styles = {}

@bot.message_handler(func=lambda message: message.text in ['‚ö™ –ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∏–∫–µ—Ä', 'üé® –ú—É–ª—å—Ç—è—à–Ω—ã–π', 'üåà –° –∫–æ–Ω—Ç—É—Ä–∞–º–∏'])
def set_style(message):
    user_styles[message.chat.id] = message.text
    style_map = {
        '‚ö™ –ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∏–∫–µ—Ä': 'simple',
        'üé® –ú—É–ª—å—Ç—è—à–Ω—ã–π': 'cartoon', 
        'üåà –° –∫–æ–Ω—Ç—É—Ä–∞–º–∏': 'outline'
    }
    
    bot.reply_to(message,
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {message.text}\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞! üì∑\n\n"
        f"‚ú® *–°–æ–≤–µ—Ç:* –õ—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—Ç —Ñ–æ—Ç–æ –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ!",
        parse_mode='Markdown'
    )

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        user_id = message.chat.id
        selected_style = user_styles.get(user_id, '‚ö™ –ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∏–∫–µ—Ä')
        style_map = {
            '‚ö™ –ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∏–∫–µ—Ä': 'simple',
            'üé® –ú—É–ª—å—Ç—è—à–Ω—ã–π': 'cartoon',
            'üåà –° –∫–æ–Ω—Ç—É—Ä–∞–º–∏': 'outline'
        }
        
        style_key = style_map.get(selected_style, 'simple')
        
        bot.reply_to(message, f"üîÑ –°–æ–∑–¥–∞—é —Å—Ç–∏–∫–µ—Ä –≤ —Å—Ç–∏–ª–µ {selected_style}...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        if not PILLOW_AVAILABLE:
            bot.reply_to(message, "‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–∫–µ—Ä
        sticker_image = create_sticker_image(downloaded_file, style_key)
        
        # –£–±–∏—Ä–∞–µ–º —Ñ–æ–Ω –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞
        if style_key == 'simple':
            sticker_image = remove_background_simple(sticker_image)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG
        output = io.BytesIO()
        sticker_image.save(output, format='PNG', optimize=True)
        output.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        bot.send_document(
            message.chat.id,
            output,
            visible_file_name='sticker.png',
            caption=f"‚úÖ *–°—Ç–∏–∫–µ—Ä –≥–æ—Ç–æ–≤!*\n\n"
                   f"üé® –°—Ç–∏–ª—å: {selected_style}\n"
                   f"üìè –†–∞–∑–º–µ—Ä: 512x512 –ø–∏–∫—Å–µ–ª–µ–π\n"
                   f"üéØ –§–æ—Ä–º–∞—Ç: PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é\n\n"
                   f"üìö *–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤ Telegram:*\n"
                   f"1. –°–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª\n"
                   f"2. –ù–∞–ø–∏—à–∏ @Stickers\n"
                   f"3. –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫\n"
                   f"4. –ó–∞–≥—Ä—É–∑–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª\n\n"
                   f"–•–æ—á–µ—à—å –µ—â–µ? –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ! üì∑",
            parse_mode='Markdown'
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å
        if user_id in user_styles:
            del user_styles[user_id]
            
    except Exception as e:
        logger.error(f"Error creating sticker: {e}")
        bot.reply_to(message,
            "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π:\n"
            "‚Ä¢ –§–æ—Ç–æ –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ\n"
            "‚Ä¢ –ë–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            "‚Ä¢ –î—Ä—É–≥–æ–π —Ä–∞–∫—É—Ä—Å\n\n"
            "–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å!",
            parse_mode='Markdown'
        )

@bot.message_handler(func=lambda message: True)
def echo(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üé® –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä'))
    markup.add(types.KeyboardButton('üìö –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤ Telegram'))
    
    bot.reply_to(message,
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ *–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä* —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üé®",
        parse_mode='Markdown',
        reply_markup=markup
    )

# –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.route('/webhook/' + TOKEN, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK', 200
    return 'Error', 403

@app.route('/')
def home():
    return "ü§ñ Sticker Creator Bot"

if __name__ == '__main__':
    print("üöÄ Starting Sticker Creator Bot...")
    print(f"üì¶ Pillow available: {PILLOW_AVAILABLE}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    render_url = os.getenv('RENDER_EXTERNAL_URL')
    if render_url:
        webhook_url = f"{render_url}/webhook/{TOKEN}"
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        print(f"‚úÖ Webhook set to: {webhook_url}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    port = int(os.getenv('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
