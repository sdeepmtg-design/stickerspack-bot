import os
import io
import logging
from flask import Flask, request
import telebot
from telebot import types
import random
import string

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Pillow
try:
    from PIL import Image, ImageOps
    PILLOW_AVAILABLE = True
    logger.info("‚úÖ Pillow is available")
except ImportError:
    PILLOW_AVAILABLE = False
    logger.warning("‚ùå Pillow not available")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_packs = {}

def generate_pack_name(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞"""
    return f"pack_{user_id}_{random.randint(1000, 9999)}_by_{bot.get_me().username}"

def create_sticker_image(photo_data):
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞ 512x512"""
    if not PILLOW_AVAILABLE:
        raise Exception("Pillow not installed")
    
    image = Image.open(io.BytesIO(photo_data)).convert('RGBA')
    target_size = 512
    
    # –°–æ–∑–¥–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
    width, height = image.size
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤–ø–∏—Å—ã–≤–∞–Ω–∏—è
    scale = min(target_size / width, target_size / height)
    new_width = int(width * scale)
    new_height = int(height * scale)
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
    resized = image.resize((new_width, new_height), Image.Resampling.LANCZOS)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω 512x512
    sticker = Image.new('RGBA', (target_size, target_size), (255, 255, 255, 0))
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    x = (target_size - new_width) // 2
    y = (target_size - new_height) // 2
    
    # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
    sticker.paste(resized, (x, y), resized)
    
    return sticker

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_packs:
        user_packs[user_id] = {
            'pack_name': generate_pack_name(user_id),
            'stickers_count': 0,
            'pack_created': False
        }
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üÜï –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫'))
    markup.add(types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä'))
    markup.add(types.KeyboardButton('üìö –ú–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫'))
    
    bot.reply_to(message,
        "üéâ *–ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤*\n\n"
        "–Ø —Å–æ–∑–¥–∞—é *–Ω–∞—Å—Ç–æ—è—â–∏–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏* —á–µ—Ä–µ–∑ Telegram API!\n\n"
        "‚ú® *–ü—Ä–æ—Ü–µ—Å—Å:*\n"
        "1. –ù–∞–∂–º–∏ *–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫*\n"
        "2. –ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        "3. –î–æ–±–∞–≤–ª—è–π —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ —Ñ–æ—Ç–æ\n"
        "4. –ü–æ–ª—É—á–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≥–æ—Ç–æ–≤—ã–π –ø–∞–∫!\n\n"
        "–ù–∞—á–Ω–∏ —Å–µ–π—á–∞—Å! üöÄ",
        parse_mode='Markdown',
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == 'üÜï –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫')
def create_new_pack(message):
    user_id = message.chat.id
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø–∞–∫–µ—Ç–∞
    user_packs[user_id] = {
        'pack_name': generate_pack_name(user_id),
        'stickers_count': 0,
        'pack_created': False,
        'waiting_for_title': True
    }
    
    bot.reply_to(message,
        "üé® *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞*\n\n"
        "–ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ú–æ–∏ –º–µ–º—ã' –∏–ª–∏ '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã')",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: user_packs.get(message.chat.id, {}).get('waiting_for_title'))
def handle_pack_title(message):
    user_id = message.chat.id
    pack_title = message.text
    
    user_packs[user_id]['pack_title'] = pack_title
    user_packs[user_id]['waiting_for_title'] = False
    
    bot.reply_to(message,
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°—Ç–∏–∫–µ—Ä–ø–∞–∫ *'{pack_title}'* –≥–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é!\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞ üì∑\n"
        "–Ø —Å–æ–∑–¥–∞–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –∏ –¥–æ–±–∞–≤–ª—é —Ç—É–¥–∞ —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —Å—Ç–∏–∫–µ—Ä!",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä')
def add_sticker(message):
    user_id = message.chat.id
    user_data = user_packs.get(user_id, {})
    
    if not user_data or not user_data.get('pack_created'):
        bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —á–µ—Ä–µ–∑ 'üÜï –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫'")
        return
    
    bot.reply_to(message, "üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞!")

@bot.message_handler(func=lambda message: message.text == 'üìö –ú–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫')
def show_my_pack(message):
    user_id = message.chat.id
    user_data = user_packs.get(user_id, {})
    
    if not user_data or not user_data.get('pack_created'):
        bot.reply_to(message, "‚ùå –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞. –°–æ–∑–¥–∞–π –µ–≥–æ —á–µ—Ä–µ–∑ 'üÜï –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫'")
        return
    
    pack_name = user_data['pack_name']
    stickers_count = user_data['stickers_count']
    
    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫
    bot_username = bot.get_me().username
    stickerpack_url = f"https://t.me/addstickers/{pack_name}"
    
    bot.reply_to(message,
        f"üìö *–¢–≤–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫*\n\n"
        f"ü™Ñ *{user_data.get('pack_title', '–ú–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫')}*\n"
        f"üìä –°—Ç–∏–∫–µ—Ä–æ–≤: {stickers_count}\n\n"
        f"üîó *–°—Å—ã–ª–∫–∞:* {stickerpack_url}\n\n"
        f"‚ú® *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        f"‚Ä¢ –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ\n"
        f"‚Ä¢ –ù–∞–∂–º–∏ 'Add Stickers'\n"
        f"‚Ä¢ –ì–æ—Ç–æ–≤–æ! –¢–≤–æ–π –ø–∞–∫ –≤ Telegram!",
        parse_mode='Markdown'
    )

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        user_id = message.chat.id
        user_data = user_packs.get(user_id, {})
        
        if not user_data:
            bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —á–µ—Ä–µ–∑ 'üÜï –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫'")
            return
        
        bot.reply_to(message, "üîÑ –°–æ–∑–¥–∞—é —Å—Ç–∏–∫–µ—Ä...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        if not PILLOW_AVAILABLE:
            bot.reply_to(message, "‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–∫–µ—Ä
        sticker_image = create_sticker_image(downloaded_file)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = f"temp_{user_id}_{user_data['stickers_count']}.png"
        sticker_image.save(temp_file, format='PNG')
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞
        emojis = "üòÄ"
        
        try:
            with open(temp_file, 'rb') as sticker_data:
                if not user_data.get('pack_created'):
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å –ø–µ—Ä–≤—ã–º —Å—Ç–∏–∫–µ—Ä–æ–º
                    bot.create_new_sticker_set(
                        user_id=user_id,
                        name=user_data['pack_name'],
                        title=user_data.get('pack_title', '–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã'),
                        png_sticker=sticker_data,
                        emojis=emojis
                    )
                    user_packs[user_id]['pack_created'] = True
                    user_packs[user_id]['stickers_count'] = 1
                    
                    stickerpack_url = f"https://t.me/addstickers/{user_data['pack_name']}"
                    
                    bot.reply_to(message,
                        f"üéâ *–°—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å–æ–∑–¥–∞–Ω!*\n\n"
                        f"‚úÖ –ü–µ—Ä–≤—ã–π —Å—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                        f"üìö –ü–∞–∫: {user_data.get('pack_title', '–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã')}\n\n"
                        f"üîó *–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫:*\n"
                        f"{stickerpack_url}\n\n"
                        f"‚ú® –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–∞–∫ –≤ Telegram!\n\n"
                        f"–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—Ç–∏–∫–µ—Ä–æ–≤? –û—Ç–ø—Ä–∞–≤–ª—è–π —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ! üì∑",
                        parse_mode='Markdown'
                    )
                    
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞–∫
                    bot.add_sticker_to_set(
                        user_id=user_id,
                        name=user_data['pack_name'],
                        png_sticker=sticker_data,
                        emojis=emojis
                    )
                    user_packs[user_id]['stickers_count'] += 1
                    
                    bot.reply_to(message,
                        f"‚úÖ *–°—Ç–∏–∫–µ—Ä #{user_packs[user_id]['stickers_count']} –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n"
                        f"üìö –ü–∞–∫: {user_data.get('pack_title', '–ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã')}\n"
                        f"üìä –í—Å–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–æ–≤: {user_packs[user_id]['stickers_count']}\n\n"
                        f"–ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Ç–∏–∫–µ—Ä—ã! üì∑",
                        parse_mode='Markdown'
                    )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(temp_file)
            
        except Exception as e:
            logger.error(f"Sticker API error: {e}")
            os.remove(temp_file)
            
            if "STICKERSET_INVALID" in str(e):
                bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞–∫ —á–µ—Ä–µ–∑ 'üÜï –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫'")
            else:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
    except Exception as e:
        logger.error(f"Error: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞")

@bot.message_handler(func=lambda message: True)
def echo(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üÜï –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫'))
    
    bot.reply_to(message,
        "–ù–∞–∂–º–∏ 'üÜï –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤! üé®",
        reply_markup=markup
    )

# –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.route('/webhook/' + TOKEN, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK', 200
    return 'Error', 403

@app.route('/')
def home():
    return "ü§ñ Telegram Sticker Pack Creator"

if __name__ == '__main__':
    print("üöÄ Starting Telegram Sticker Pack Creator...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    render_url = os.getenv('RENDER_EXTERNAL_URL')
    if render_url:
        webhook_url = f"{render_url}/webhook/{TOKEN}"
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        print(f"‚úÖ Webhook set to: {webhook_url}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    port = int(os.getenv('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
