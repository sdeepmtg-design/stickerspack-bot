import os
import io
import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from rembg import remove
from PIL import Image, ImageFilter, ImageEnhance

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not API_TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class StickerStates(StatesGroup):
    waiting_for_photo = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∏–ª–µ–π
def get_style_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("‚ö™ –ü—Ä–æ—Å—Ç–æ –±–µ–∑ —Ñ–æ–Ω–∞"), KeyboardButton("üé® –ú—É–ª—å—Ç—è—à–Ω—ã–π")],
            [KeyboardButton("üåà –Ø—Ä–∫–∏–π –∫–æ–Ω—Ç—É—Ä"), KeyboardButton("üëæ –ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç")],
            [KeyboardButton("üìê –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π"), KeyboardButton("üéØ –ß/–ë –∫–æ–Ω—Ç—É—Ä")]
        ],
        resize_keyboard=True
    )

@dp.message_handler(commands=['start'])
async def start_command(message: Message):
    await message.answer(
        "üé® –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏!\n\n"
        "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ:",
        reply_markup=get_style_keyboard()
    )

@dp.message_handler(commands=['help'])
async def help_command(message: Message):
    await message.answer(
        "ü§ñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
        "1. –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏–∑ –º–µ–Ω—é\n"
        "2. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
        "3. –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏:\n"
        "‚ö™ –ü—Ä–æ—Å—Ç–æ –±–µ–∑ —Ñ–æ–Ω–∞ - —É–±–∏—Ä–∞–µ—Ç —Ñ–æ–Ω\n"
        "üé® –ú—É–ª—å—Ç—è—à–Ω—ã–π - –¥–µ–ª–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –º—É–ª—å—Ç—Ñ–∏–ª—å–º\n"
        "üåà –Ø—Ä–∫–∏–π –∫–æ–Ω—Ç—É—Ä - –¥–æ–±–∞–≤–ª—è–µ—Ç —è—Ä–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã\n"
        "üëæ –ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç - –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤ –ø–∏–∫—Å–µ–ª—å–Ω—É—é –≥—Ä–∞—Ñ–∏–∫—É\n"
        "üìê –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π - —É–ø—Ä–æ—â–∞–µ—Ç –¥–æ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º\n"
        "üéØ –ß/–ë –∫–æ–Ω—Ç—É—Ä - —Å–æ–∑–¥–∞–µ—Ç —á–µ—Ä–Ω–æ-–±–µ–ª—ã–π –∫–æ–Ω—Ç—É—Ä–Ω—ã–π —Ä–∏—Å—É–Ω–æ–∫"
    )

@dp.message_handler(lambda message: message.text in [
    "‚ö™ –ü—Ä–æ—Å—Ç–æ –±–µ–∑ —Ñ–æ–Ω–∞", "üé® –ú—É–ª—å—Ç—è—à–Ω—ã–π", "üåà –Ø—Ä–∫–∏–π –∫–æ–Ω—Ç—É—Ä", 
    "üëæ –ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç", "üìê –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π", "üéØ –ß/–ë –∫–æ–Ω—Ç—É—Ä"
])
async def choose_style(message: Message, state: FSMContext):
    style_map = {
        "‚ö™ –ü—Ä–æ—Å—Ç–æ –±–µ–∑ —Ñ–æ–Ω–∞": "no_bg",
        "üé® –ú—É–ª—å—Ç—è—à–Ω—ã–π": "cartoon", 
        "üåà –Ø—Ä–∫–∏–π –∫–æ–Ω—Ç—É—Ä": "outline",
        "üëæ –ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç": "pixel",
        "üìê –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π": "geometric",
        "üéØ –ß/–ë –∫–æ–Ω—Ç—É—Ä": "bw_sketch"
    }
    
    await state.update_data(style=style_map[message.text])
    await StickerStates.waiting_for_photo.set()
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ üì∑")

@dp.message_handler(content_types=['photo'], state=StickerStates.waiting_for_photo)
async def process_photo_with_style(message: Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        selected_style = user_data.get('style', 'no_bg')
        
        await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        downloaded_file = await bot.download_file(file.file_path)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        input_image = Image.open(io.BytesIO(downloaded_file.getvalue())).convert('RGB')
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å
        if selected_style == 'no_bg':
            output_image = apply_no_background(input_image)
        elif selected_style == 'cartoon':
            output_image = apply_cartoon_style(input_image)
        elif selected_style == 'outline':
            output_image = apply_outline_style(input_image)
        elif selected_style == 'pixel':
            output_image = apply_pixel_style(input_image)
        elif selected_style == 'geometric':
            output_image = apply_geometric_style(input_image)
        elif selected_style == 'bw_sketch':
            output_image = apply_bw_sketch_style(input_image)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞
        output_bytes = io.BytesIO()
        output_image.save(output_bytes, format='PNG', optimize=True)
        output_bytes.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.reply_document(
            document=types.InputFile(output_bytes, filename='sticker.png'),
            caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°—Ç–∏–ª—å: {selected_style}"
        )
        
    except Exception as e:
        logger.error(f"Error processing image: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
    
    finally:
        await state.finish()

@dp.message_handler(content_types=['photo'])
async def process_photo_without_style(message: Message):
    await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ!", reply_markup=get_style_keyboard())

# –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∏–ª–µ–π
def apply_no_background(image):
    """–ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ—Ç —Ñ–æ–Ω"""
    return remove(image)

def apply_cartoon_style(image):
    """–ú—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å"""
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ñ–æ–Ω
    no_bg = remove(image)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
    enhancer = ImageEnhance.Color(no_bg)
    saturated = enhancer.enhance(1.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–∫–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –¥–ª—è –º—É–ª—å—Ç—è—à–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    cartoon = saturated.filter(ImageFilter.SMOOTH_MORE)
    
    return cartoon

def apply_outline_style(image):
    """–°—Ç–∏–ª—å —Å —è—Ä–∫–∏–º–∏ –∫–æ–Ω—Ç—É—Ä–∞–º–∏"""
    no_bg = remove(image)
    
    # –ù–∞—Ö–æ–¥–∏–º –∫—Ä–∞—è
    edges = no_bg.filter(ImageFilter.FIND_EDGES)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç –∫—Ä–∞–µ–≤
    enhancer = ImageEnhance.Contrast(edges)
    strong_edges = enhancer.enhance(3.0)
    
    # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∫—Ä–∞—è –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª
    result = Image.blend(no_bg, strong_edges, 0.3)
    
    return result

def apply_pixel_style(image):
    """–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç —Å—Ç–∏–ª—å"""
    no_bg = remove(image)
    
    # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    small_size = (128, 128)
    pixelated = no_bg.resize(small_size, Image.NEAREST)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
    result = pixelated.resize(no_bg.size, Image.NEAREST)
    
    return result

def apply_geometric_style(image):
    """–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å"""
    no_bg = remove(image)
    
    # –£–ø—Ä–æ—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ—Å—Ç–µ—Ä–Ω–∏–∑–∞—Ü–∏—é
    simplified = no_bg.convert('P', palette=Image.ADAPTIVE, colors=8)
    result = simplified.convert('RGB')
    
    return result

def apply_bw_sketch_style(image):
    """–ß–µ—Ä–Ω–æ-–±–µ–ª—ã–π –∫–æ–Ω—Ç—É—Ä–Ω—ã–π —Å—Ç–∏–ª—å"""
    no_bg = remove(image)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ
    gray = no_bg.convert('L')
    
    # –ù–∞—Ö–æ–¥–∏–º –∫—Ä–∞—è
    edges = gray.filter(ImageFilter.FIND_EDGES)
    
    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º (—á–µ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ)
    inverted = Image.eval(edges, lambda x: 255 - x)
    
    return inverted.convert('RGB')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
