import os
import io
import logging
from flask import Flask, request
import telebot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Pillow
try:
    from PIL import Image, ImageOps, ImageFilter, ImageEnhance
    PILLOW_AVAILABLE = True
    logger.info("‚úÖ Pillow is available")
except ImportError:
    PILLOW_AVAILABLE = False
    logger.warning("‚ùå Pillow not available - using basic functionality")

def create_sticker_from_photo(photo_data, style='simple'):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π —Å—Ç–∏–∫–µ—Ä –∏–∑ —Ñ–æ—Ç–æ"""
    if not PILLOW_AVAILABLE:
        raise Exception("Pillow not installed")
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = Image.open(io.BytesIO(photo_data)).convert('RGBA')
    
    # –°–æ–∑–¥–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 512x512 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤)
    target_size = 512
    
    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ–±—Ä–µ–∑–∫–∏
    width, height = image.size
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
    if width > height:
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ - –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
        left = (width - height) // 2
        top = 0
        right = left + height
        bottom = height
    else:
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ - –æ–±—Ä–µ–∑–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
        left = 0
        top = (height - width) // 2
        right = width
        bottom = top + width
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
    cropped = image.crop((left, top, right, bottom))
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ 512x512
    sticker = cropped.resize((target_size, target_size), Image.Resampling.LANCZOS)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
    if style == 'cartoon':
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º—É–ª—å—Ç—è—à–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        enhancer = ImageEnhance.Color(sticker)
        sticker = enhancer.enhance(1.3)
        sticker = sticker.filter(ImageFilter.SMOOTH_MORE)
    elif style == 'outline':
        # –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ç—É—Ä–æ–≤
        edges = sticker.filter(ImageFilter.FIND_EDGES)
        sticker = Image.blend(sticker, edges, 0.1)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
    output = io.BytesIO()
    sticker.save(output, format='PNG', optimize=True)
    output.seek(0)
    
    return output

@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton('üì∏ –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä'))
    markup.add(telebot.types.KeyboardButton('‚ÑπÔ∏è –û –±–æ—Ç–µ'))
    
    bot.reply_to(message,
        "üé® *–ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –∏ —è –ø—Ä–µ–≤—Ä–∞—â—É –µ–≥–æ –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π —Å—Ç–∏–∫–µ—Ä!\n"
        "‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω\n"  
        "‚Ä¢ –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 512x512\n"
        "‚Ä¢ –ì–æ—Ç–æ–≤–æ –¥–ª—è Telegram\n\n"
        "–ù–∞–∂–º–∏ *–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä* –∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ!",
        parse_mode='Markdown',
        reply_markup=markup
    )

@bot.message_handler(commands=['help'])
def help_cmd(message):
    bot.reply_to(message,
        "ü§ñ *–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä:*\n"
        "1. –ù–∞–∂–º–∏ *–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä*\n"
        "2. –û—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–µ —Ñ–æ—Ç–æ\n"
        "3. –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π PNG-—Å—Ç–∏–∫–µ—Ä\n\n"
        "üìù *–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:*\n"
        "‚Ä¢ –û–±—Ä–µ–∑–∞–µ—Ç —Ñ–æ—Ç–æ –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞\n"
        "‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç –¥–æ 512x512 –ø–∏–∫—Å–µ–ª–µ–π\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º\n"
        "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –¥–ª—è Telegram\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏ –ø–æ–ø—Ä–æ–±—É–π! üì∑",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: message.text == 'üì∏ –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä')
def make_sticker(message):
    bot.reply_to(message, 
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞!\n\n"
        "üìù *–°–æ–≤–µ—Ç:*\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏ —Ñ–æ—Ç–æ —Å —á–µ—Ç–∫–∏–º –æ–±—ä–µ–∫—Ç–æ–º\n"  
        "‚Ä¢ –õ—É—á—à–µ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ —Ñ–æ–Ω–∞\n"
        "‚Ä¢ –û–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –û –±–æ—Ç–µ')
def about(message):
    help_cmd(message)

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        bot.reply_to(message, "üîÑ –°–æ–∑–¥–∞—é —Å—Ç–∏–∫–µ—Ä...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        if PILLOW_AVAILABLE:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π —Å—Ç–∏–∫–µ—Ä
            sticker_data = create_sticker_from_photo(downloaded_file)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
            bot.send_document(
                message.chat.id, 
                sticker_data, 
                visible_file_name='sticker.png',
                caption="‚úÖ *–ì–æ—Ç–æ–≤–æ! –¢–≤–æ–π —Å—Ç–∏–∫–µ—Ä:*\n\n"
                       "‚Ä¢ –§–æ—Ä–º–∞—Ç: 512x512 –ø–∏–∫—Å–µ–ª–µ–π\n"
                       "‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω\n" 
                       "‚Ä¢ –ì–æ—Ç–æ–≤ –¥–ª—è Telegram\n\n"
                       "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫:\n"
                       "1. –°–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª\n"
                       "2. –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –≤ Telegram\n"
                       "3. –î–æ–±–∞–≤—å —ç—Ç–æ—Ç PNG –∫–∞–∫ —Å—Ç–∏–∫–µ—Ä",
                parse_mode='Markdown'
            )
        else:
            # Pillow –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            bot.reply_to(message,
                "‚ùå *–§—É–Ω–∫—Ü–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\n\n"
                "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!",
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Error creating sticker: {e}")
        bot.reply_to(message,
            "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π:\n"
            "‚Ä¢ –î—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ\n" 
            "‚Ä¢ –ë–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            "‚Ä¢ –û–±—ä–µ–∫—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞–¥—Ä–∞",
            parse_mode='Markdown'
        )

@bot.message_handler(func=lambda message: True)
def echo(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton('üì∏ –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä'))
    
    bot.reply_to(message,
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞! üì∑\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=markup
    )

# –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.route('/webhook/' + TOKEN, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK', 200
    return 'Error', 403

@app.route('/')
def home():
    return "ü§ñ Sticker Bot - Ready to create stickers!"

@app.route('/health')
def health():
    return "OK"

if __name__ == '__main__':
    print("üöÄ Starting Real Sticker Bot...")
    print(f"üì¶ Pillow available: {PILLOW_AVAILABLE}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    render_url = os.getenv('RENDER_EXTERNAL_URL')
    if render_url:
        webhook_url = f"{render_url}/webhook/{TOKEN}"
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        print(f"‚úÖ Webhook set to: {webhook_url}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    port = int(os.getenv('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
