import os
import io
import logging
from flask import Flask, request
import telebot
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Pillow
try:
    from PIL import Image, ImageOps
    PILLOW_AVAILABLE = True
    logger.info("‚úÖ Pillow is available")
except ImportError:
    PILLOW_AVAILABLE = False
    logger.warning("‚ùå Pillow not available")

# –°—Ç–∏–∫–µ—Ä–ø–∞–∫ –±–æ—Ç–∞ (—É –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫)
STICKER_SET_NAME = "MyCustomStickersByBot"  # –î–æ–ª–∂–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ ByBot

def create_sticker_image(photo_data):
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞"""
    if not PILLOW_AVAILABLE:
        raise Exception("Pillow not installed")
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = Image.open(io.BytesIO(photo_data)).convert('RGBA')
    
    # –†–∞–∑–º–µ—Ä –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤ Telegram
    target_size = 512
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º)
    width, height = image.size
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –æ–±–ª–∞—Å—Ç—å
    size = min(width, height)
    left = (width - size) // 2
    top = (height - size) // 2
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
    cropped = image.crop((left, top, left + size, top + size))
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ 512x512
    sticker = cropped.resize((target_size, target_size), Image.Resampling.LANCZOS)
    
    return sticker

def create_sticker_set(user_id):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    pack_name = f"{STICKER_SET_NAME}_{user_id}"
    return pack_name

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä'))
    markup.add(types.KeyboardButton('üìö –ú–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫'))
    
    bot.reply_to(message,
        "üéâ *–ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤*\n\n"
        "–Ø —Å–æ–∑–¥–∞—é *–Ω–∞—Å—Ç–æ—è—â–∏–µ —Å—Ç–∏–∫–µ—Ä—ã* –∫–æ—Ç–æ—Ä—ã–µ —Å—Ä–∞–∑—É –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ Telegram!\n\n"
        "‚ú® *–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:*\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –∏–∑ —Ñ–æ—Ç–æ\n"
        "‚Ä¢ –°—Ç–∏–∫–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–≤–æ–π –ø–∞–∫\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã\n\n"
        "–ù–∞–∂–º–∏ *–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä* –∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ! üöÄ",
        parse_mode='Markdown',
        reply_markup=markup
    )

@bot.message_handler(commands=['addsticker'])
def add_sticker(message):
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞! üì∑")

@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä')
def add_sticker_btn(message):
    bot.reply_to(message, 
        "üì∏ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ - —è –ø—Ä–µ–≤—Ä–∞—â—É –µ–≥–æ –≤ —Å—Ç–∏–∫–µ—Ä!\n\n"
        "‚ú® *–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:*\n"
        "‚Ä¢ –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Ñ–æ—Ç–æ —Ä–∞–±–æ—Ç–∞—é—Ç –ª—É—á—à–µ\n"
        "‚Ä¢ –û–±—ä–µ–∫—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞–¥—Ä–∞\n"
        "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: message.text == 'üìö –ú–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫')
def my_stickerpack(message):
    pack_name = create_sticker_set(message.chat.id)
    bot.reply_to(message,
        f"üìö *–¢–≤–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫*\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–∫–µ—Ä—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ Telegram!\n\n"
        f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä:\n"
        f"1. –ù–∞–∂–º–∏ *–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä*\n"
        f"2. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ\n"
        f"3. –ì–æ—Ç–æ–≤–æ! –°—Ç–∏–∫–µ—Ä –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ç–≤–æ–µ–º –ø–∞–∫–µ\n\n"
        f"‚ú® –í—Å–µ –ø—Ä–æ—Å—Ç–æ!",
        parse_mode='Markdown'
    )

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        user_id = message.chat.id
        pack_name = create_sticker_set(user_id)
        
        bot.reply_to(message, "üîÑ –°–æ–∑–¥–∞—é —Å—Ç–∏–∫–µ—Ä...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        if PILLOW_AVAILABLE:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–∫–µ—Ä
            sticker_image = create_sticker_image(downloaded_file)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG
            output = io.BytesIO()
            sticker_image.save(output, format='PNG', optimize=True)
            output.seek(0)
            
            try:
                # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞
                emoji = "üëç"
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–∫–µ—Ä
                with open('temp_sticker.png', 'wb') as f:
                    f.write(output.getvalue())
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç–∏–∫–µ—Ä (—ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç —Å—Ç–∏–∫–µ—Ä –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)
                with open('temp_sticker.png', 'rb') as sticker_file:
                    bot.send_sticker(
                        message.chat.id,
                        sticker_file,
                        reply_to_message_id=message.message_id
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove('temp_sticker.png')
                
                bot.reply_to(message,
                    "‚úÖ *–°—Ç–∏–∫–µ—Ä —Å–æ–∑–¥–∞–Ω!*\n\n"
                    "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å:\n"
                    "‚Ä¢ –ù–∞–∂–∞—Ç—å –Ω–∞ —Å—Ç–∏–∫–µ—Ä —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n"
                    "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–∑—å—è–º\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–º —á–∞—Ç–µ\n\n"
                    "–•–æ—á–µ—à—å –µ—â–µ —Å—Ç–∏–∫–µ—Ä–æ–≤? –û—Ç–ø—Ä–∞–≤–ª—è–π —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ! üì∑",
                    parse_mode='Markdown'
                )
                
            except Exception as e:
                logger.error(f"Sticker creation error: {e}")
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                bot.send_document(
                    message.chat.id,
                    output,
                    visible_file_name='sticker.png',
                    caption="‚úÖ –°—Ç–∏–∫–µ—Ä –≥–æ—Ç–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç —Ñ–∞–π–ª"
                )
            
        else:
            bot.reply_to(message, "‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
    except Exception as e:
        logger.error(f"Error: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞")

@bot.message_handler(func=lambda message: True)
def echo(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä'))
    
    bot.reply_to(message,
        "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞! üì∑\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=markup
    )

# –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.route('/webhook/' + TOKEN, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK', 200
    return 'Error', 403

@app.route('/')
def home():
    return "ü§ñ Real Sticker Creator Bot"

if __name__ == '__main__':
    print("üöÄ Starting Real Sticker Creator...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    render_url = os.getenv('RENDER_EXTERNAL_URL')
    if render_url:
        webhook_url = f"{render_url}/webhook/{TOKEN}"
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        print(f"‚úÖ Webhook set to: {webhook_url}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    port = int(os.getenv('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
