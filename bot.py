import os
import logging

# –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def main():
    TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    if not TOKEN:
        logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    logger.info("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å aiogram...")
    
    try:
        from aiogram import Bot, Dispatcher, types, executor
        
        bot = Bot(token=TOKEN)
        dp = Dispatcher(bot)
        logger.info("‚úÖ Aiogram —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        
        @dp.message_handler(commands=['start'])
        async def start_handler(message: types.Message):
            await message.answer("üéâ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /test")
            
        @dp.message_handler(commands=['test'])
        async def test_handler(message: types.Message):
            await message.answer("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç!")
            
        @dp.message_handler()
        async def echo_handler(message: types.Message):
            await message.answer(f"–≠—Ö–æ: {message.text}")
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        executor.start_polling(dp, skip_updates=True)
        
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        logger.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å python-telegram-bot –≤–º–µ—Å—Ç–æ aiogram")

if __name__ == '__main__':
    main()
