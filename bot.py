import os
import io
import logging
import random
import string
from flask import Flask, request
import telebot
from telebot import types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Pillow
try:
    from PIL import Image, ImageOps
    PILLOW_AVAILABLE = True
    logger.info("‚úÖ Pillow is available")
except ImportError:
    PILLOW_AVAILABLE = False
    logger.warning("‚ùå Pillow not available")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
user_data = {}

def generate_pack_name():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞"""
    return 'pack_' + ''.join(random.choices(string.ascii_lowercase + string.digits, k=10))

def create_proper_sticker(photo_data, user_id):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –¥–ª—è Telegram"""
    if not PILLOW_AVAILABLE:
        raise Exception("Pillow not installed")
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = Image.open(io.BytesIO(photo_data)).convert('RGBA')
    
    # –†–∞–∑–º–µ—Ä –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤ Telegram
    target_size = 512
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º)
    width, height = image.size
    
    if width == height:
        # –£–∂–µ –∫–≤–∞–¥—Ä–∞—Ç
        cropped = image
    elif width > height:
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ - –æ–±—Ä–µ–∑–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
        left = (width - height) // 2
        cropped = image.crop((left, 0, left + height, height))
    else:
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ - –æ–±—Ä–µ–∑–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
        top = (height - width) // 2
        cropped = image.crop((0, top, width, top + width))
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ 512x512
    sticker = cropped.resize((target_size, target_size), Image.Resampling.LANCZOS)
    
    return sticker

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üé® –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫'))
    markup.add(types.KeyboardButton('üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[message.chat.id] = {
        'pack_name': generate_pack_name(),
        'stickers_count': 0,
        'waiting_for_title': False
    }
    
    bot.reply_to(message,
        "üéâ *–ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤*\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫!\n\n"
        "‚ú® *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
        "1. –ù–∞–∂–º–∏ *–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫*\n"
        "2. –û—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ –æ–¥–Ω–æ –∑–∞ –¥—Ä—É–≥–∏–º\n"
        "3. –ü–æ–ª—É—á–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≥–æ—Ç–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫!\n\n"
        "–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üöÄ",
        parse_mode='Markdown',
        reply_markup=markup
    )

@bot.message_handler(commands=['newpack'])
def new_pack(message):
    user_data[message.chat.id] = {
        'pack_name': generate_pack_name(),
        'stickers_count': 0,
        'waiting_for_title': True
    }
    
    bot.reply_to(message,
        "üé® *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞*\n\n"
        "–ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ú–æ–∏ –∫—Ä—É—Ç—ã–µ —Å—Ç–∏–∫–µ—Ä—ã' –∏–ª–∏ 'Memes 2024')",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: message.text == 'üé® –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫')
def create_pack(message):
    user_data[message.chat.id] = {
        'pack_name': generate_pack_name(), 
        'stickers_count': 0,
        'waiting_for_title': True
    }
    
    bot.reply_to(message,
        "üé® *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞*\n\n"
        "–ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ú–æ–∏ –∫—Ä—É—Ç—ã–µ —Å—Ç–∏–∫–µ—Ä—ã' –∏–ª–∏ 'Memes 2024')",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: message.text == 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
def show_instructions(message):
    bot.reply_to(message,
        "üìñ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞*\n\n"
        "1. –ù–∞–∂–º–∏ *–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫*\n"
        "2. –ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        "3. –û—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ –æ–¥–Ω–æ –∑–∞ –¥—Ä—É–≥–∏–º\n"
        "4. –ö–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫\n"
        "5. –ü–æ–ª—É—á–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≥–æ—Ç–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫!\n\n"
        "‚ú® *–°–æ–≤–µ—Ç—ã:*\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ç–æ —Å —á–µ—Ç–∫–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏\n"
        "‚Ä¢ –õ—É—á—à–µ –Ω–∞ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–º —Ñ–æ–Ω–µ\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 120 —Å—Ç–∏–∫–µ—Ä–æ–≤\n\n"
        "–ù–∞—á–Ω–∏ —Å –∫–Ω–æ–ø–∫–∏ *–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫*!",
        parse_mode='Markdown'
    )

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('waiting_for_title'))
def handle_pack_title(message):
    user_id = message.chat.id
    user_data[user_id]['pack_title'] = message.text
    user_data[user_id]['waiting_for_title'] = False
    
    bot.reply_to(message,
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°—Ç–∏–∫–µ—Ä–ø–∞–∫ *'{message.text}'* —Å–æ–∑–¥–∞–Ω!\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ –æ–¥–Ω–æ –∑–∞ –¥—Ä—É–≥–∏–º:\n"
        "‚Ä¢ –ö–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ —Å—Ç–∞–Ω–µ—Ç —Å—Ç–∏–∫–µ—Ä–æ–º\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ\n"
        "‚Ä¢ –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å - –Ω–∞–ø–∏—à–∏ /done\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ! üì∑",
        parse_mode='Markdown'
    )

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        user_id = message.chat.id
        user_info = user_data.get(user_id, {})
        
        if not user_info or user_info.get('waiting_for_title'):
            bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫! –ù–∞–∂–º–∏ '–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫'")
            return
        
        bot.reply_to(message, "üîÑ –î–æ–±–∞–≤–ª—è—é —Å—Ç–∏–∫–µ—Ä –≤ —Ç–≤–æ–π –ø–∞–∫...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        if PILLOW_AVAILABLE:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–∫–µ—Ä
            sticker_image = create_proper_sticker(downloaded_file, user_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG
            output = io.BytesIO()
            sticker_image.save(output, format='PNG', optimize=True)
            output.seek(0)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (–ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ —á–µ—Ä–µ–∑ API)
            user_data[user_id]['stickers_count'] += 1
            
            bot.send_document(
                message.chat.id,
                output,
                visible_file_name=f"sticker_{user_data[user_id]['stickers_count']}.png",
                caption=f"‚úÖ –°—Ç–∏–∫–µ—Ä #{user_data[user_id]['stickers_count']} –≥–æ—Ç–æ–≤!\n"
                       f"–ü–∞–∫: {user_info.get('pack_title', '–ú–æ–π –ø–∞–∫')}\n\n"
                       f"–û—Ç–ø—Ä–∞–≤–ª—è–π —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /done —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å"
            )
            
        else:
            bot.reply_to(message, "‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
    except Exception as e:
        logger.error(f"Error: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞")

@bot.message_handler(commands=['done'])
def finish_pack(message):
    user_id = message.chat.id
    user_info = user_data.get(user_id, {})
    
    if not user_info or user_info.get('waiting_for_title'):
        bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫!")
        return
    
    stickers_count = user_info.get('stickers_count', 0)
    
    if stickers_count == 0:
        bot.reply_to_message(message, "‚ùå –¢—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞!")
        return
    
    bot.reply_to(message,
        f"üéâ *–¢–≤–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –≥–æ—Ç–æ–≤!*\n\n"
        f"üì¶ *{user_info.get('pack_title', '–ú–æ–π –ø–∞–∫')}*\n"
        f"üìä –°—Ç–∏–∫–µ—Ä–æ–≤: {stickers_count}\n\n"
        f"üìù *–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã –≤ Telegram:*\n"
        f"1. –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ PNG-—Ñ–∞–π–ª—ã\n"
        f"2. –ù–∞–ø–∏—à–∏ @Stickers –±–æ—Ç—É\n"
        f"3. –í—ã–±–µ—Ä–∏ /newpack\n"
        f"4. –ó–∞–≥—Ä—É–∑–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n"
        f"‚ú® –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫!\n\n"
        f"–•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω? –ù–∞–∂–º–∏ *–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫*!",
        parse_mode='Markdown',
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
            types.KeyboardButton('üé® –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫')
        )
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = {}

@bot.message_handler(func=lambda message: True)
def echo(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üé® –°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫'))
    markup.add(types.KeyboardButton('üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'))
    
    bot.reply_to(message,
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá",
        reply_markup=markup
    )

# –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.route('/webhook/' + TOKEN, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK', 200
    return 'Error', 403

@app.route('/')
def home():
    return "ü§ñ Sticker Pack Creator Bot"

if __name__ == '__main__':
    print("üöÄ Starting Sticker Pack Creator...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    render_url = os.getenv('RENDER_EXTERNAL_URL')
    if render_url:
        webhook_url = f"{render_url}/webhook/{TOKEN}"
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        print(f"‚úÖ Webhook set to: {webhook_url}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    port = int(os.getenv('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
