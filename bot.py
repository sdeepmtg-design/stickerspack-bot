import os
import io
import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from PIL import Image, ImageFilter, ImageEnhance

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not API_TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class StickerStates(StatesGroup):
    waiting_for_photo = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∏–ª–µ–π
def get_style_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üé® –ú—É–ª—å—Ç—è—à–Ω—ã–π"), KeyboardButton("üëæ –ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç")],
            [KeyboardButton("üåà –ö–æ–Ω—Ç—É—Ä—ã"), KeyboardButton("üî• –í–∏–Ω—Ç–∞–∂–Ω—ã–π")]
        ],
        resize_keyboard=True
    )

@dp.message_handler(commands=['start'])
async def start_command(message: Message):
    await message.answer(
        "üé® –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤!\n\n"
        "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ:",
        reply_markup=get_style_keyboard()
    )

@dp.message_handler(commands=['help'])
async def help_command(message: Message):
    await message.answer(
        "ü§ñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "1. –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏–∑ –º–µ–Ω—é\n" 
        "2. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ\n"
        "3. –ü–æ–ª—É—á–∏ —Å—Ç–∏–∫–µ—Ä!\n\n"
        "–°—Ç–∏–ª–∏:\n"
        "üé® –ú—É–ª—å—Ç—è—à–Ω—ã–π - —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞\n"
        "üëæ –ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç - —Ä–µ—Ç—Ä–æ —Å—Ç–∏–ª—å\n"
        "üåà –ö–æ–Ω—Ç—É—Ä—ã - –≤—ã–¥–µ–ª—è–µ—Ç –∫—Ä–∞—è\n"
        "üî• –í–∏–Ω—Ç–∞–∂–Ω—ã–π - —Å—Ç–∞—Ä–∏–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç"
    )

@dp.message_handler(lambda message: message.text in ["üé® –ú—É–ª—å—Ç—è—à–Ω—ã–π", "üëæ –ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç", "üåà –ö–æ–Ω—Ç—É—Ä—ã", "üî• –í–∏–Ω—Ç–∞–∂–Ω—ã–π"])
async def choose_style(message: Message, state: FSMContext):
    style_map = {
        "üé® –ú—É–ª—å—Ç—è—à–Ω—ã–π": "cartoon", 
        "üëæ –ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç": "pixel",
        "üåà –ö–æ–Ω—Ç—É—Ä—ã": "outline", 
        "üî• –í–∏–Ω—Ç–∞–∂–Ω—ã–π": "vintage"
    }
    
    await state.update_data(style=style_map[message.text])
    await StickerStates.waiting_for_photo.set()
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ üì∑")

@dp.message_handler(content_types=['photo'], state=StickerStates.waiting_for_photo)
async def process_photo(message: Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        selected_style = user_data.get('style', 'cartoon')
        
        await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        downloaded_file = await bot.download_file(file.file_path)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(io.BytesIO(downloaded_file.getvalue())).convert('RGB')
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
        if selected_style == 'cartoon':
            result = apply_cartoon(image)
        elif selected_style == 'pixel':
            result = apply_pixel(image)
        elif selected_style == 'outline':
            result = apply_outline(image)
        elif selected_style == 'vintage':
            result = apply_vintage(image)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG
        output = io.BytesIO()
        result.save(output, format='PNG')
        output.seek(0)
        
        await message.reply_document(
            document=types.InputFile(output, filename='sticker.png'),
            caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°—Ç–∏–ª—å: {selected_style}"
        )
        
    except Exception as e:
        logger.error(f"Error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
    finally:
        await state.finish()

@dp.message_handler(content_types=['photo'])
async def photo_without_style(message: Message):
    await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å!", reply_markup=get_style_keyboard())

# –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
def apply_cartoon(img):
    enhancer = ImageEnhance.Color(img)
    return enhancer.enhance(1.3)

def apply_pixel(img):
    small = img.resize((100, 100), Image.NEAREST)
    return small.resize(img.size, Image.NEAREST)

def apply_outline(img):
    return img.filter(ImageFilter.EDGE_ENHANCE)

def apply_vintage(img):
    # –ü—Ä–æ—Å—Ç–æ–π –≤–∏–Ω—Ç–∞–∂–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç - –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ
    enhancer = ImageEnhance.Brightness(img)
    return enhancer.enhance(0.8)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
