import os
import io
import logging
import requests
from flask import Flask, request
from PIL import Image, ImageFilter, ImageEnhance, ImageOps
import telebot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_styles = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def create_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton('üé® –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å')
    btn2 = telebot.types.KeyboardButton('üì∏ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä')
    btn3 = telebot.types.KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')
    markup.add(btn1, btn2, btn3)
    return markup

def create_styles_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        telebot.types.KeyboardButton('üîÑ –ú—É–ª—å—Ç—è—à–Ω—ã–π'),
        telebot.types.KeyboardButton('üëæ –ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç'),
        telebot.types.KeyboardButton('üåà –ö–æ–Ω—Ç—É—Ä—ã'),
        telebot.types.KeyboardButton('üî• –í–∏–Ω—Ç–∞–∂–Ω—ã–π'),
        telebot.types.KeyboardButton('‚ö™ –ë–µ–∑ —Ñ–æ–Ω–∞'),
        telebot.types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
    )
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, 
        "üéâ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤!\n\n"
        "–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ - —è —Å–¥–µ–ª–∞—é –∏–∑ –Ω–µ–≥–æ —Å—Ç–∏–∫–µ—Ä! üé®",
        reply_markup=create_keyboard()
    )

@bot.message_handler(commands=['help'])
def help_cmd(message):
    bot.reply_to(message,
        "ü§ñ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä:\n"
        "1. –ù–∞–∂–º–∏ '–í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å'\n"
        "2. –í—ã–±–µ—Ä–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Å—Ç–∏–ª—å\n"
        "3. –ù–∞–∂–º–∏ '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä'\n"
        "4. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ\n\n"
        "‚ú® –ì–æ—Ç–æ–≤–æ! –ü–æ–ª—É—á–∏—à—å PNG-—Ñ–∞–π–ª –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞!"
    )

@bot.message_handler(func=lambda message: message.text == 'üì∏ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä')
def make_sticker(message):
    selected_style = user_styles.get(message.chat.id)
    if selected_style:
        bot.reply_to(message, f"–°—Ç–∏–ª—å: {selected_style}\n–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞! üì∑")
    else:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ! üì∑")

@bot.message_handler(func=lambda message: message.text == 'üé® –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å')
def show_styles(message):
    bot.reply_to(message, "üé® –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞:", reply_markup=create_styles_keyboard())

@bot.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
def back_to_main(message):
    bot.reply_to(message, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_keyboard())

@bot.message_handler(func=lambda message: message.text in ['üîÑ –ú—É–ª—å—Ç—è—à–Ω—ã–π', 'üëæ –ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç', 'üåà –ö–æ–Ω—Ç—É—Ä—ã', 'üî• –í–∏–Ω—Ç–∞–∂–Ω—ã–π', '‚ö™ –ë–µ–∑ —Ñ–æ–Ω–∞'])
def set_style(message):
    user_styles[message.chat.id] = message.text
    bot.reply_to(message, 
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {message.text}\n"
        f"–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä' –∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ!",
        reply_markup=create_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
def show_help(message):
    help_cmd(message)

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        selected_style = user_styles.get(message.chat.id, 'üîÑ –ú—É–ª—å—Ç—è—à–Ω—ã–π')
        bot.reply_to(message, f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ –≤ —Å—Ç–∏–ª–µ {selected_style}...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∏–∫–µ—Ä
        sticker_data = create_simple_sticker(downloaded_file, selected_style)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.send_document(message.chat.id, sticker_data, visible_file_name='sticker.png')
        bot.reply_to(message, f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°—Ç–∏–∫–µ—Ä –≤ —Å—Ç–∏–ª–µ: {selected_style}")
        
    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")

def create_simple_sticker(image_data, style):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∏–∫–µ—Ä –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Pillow –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        image = Image.open(io.BytesIO(image_data)).convert('RGB')
        
        # –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∏–ª—è
        if style == 'üëæ –ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç':
            # –ü–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è
            small = image.resize((64, 64), Image.NEAREST)
            result = small.resize(image.size, Image.NEAREST)
        elif style == 'üåà –ö–æ–Ω—Ç—É—Ä—ã':
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—É—Ä—ã
            result = image.filter(ImageFilter.EDGE_ENHANCE_MORE)
        elif style == 'üî• –í–∏–Ω—Ç–∞–∂–Ω—ã–π':
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∏–Ω—Ç–∞–∂–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç - –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ
            enhancer = ImageEnhance.Brightness(image)
            result = enhancer.enhance(0.8)
        elif style == '‚ö™ –ë–µ–∑ —Ñ–æ–Ω–∞':
            # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ (–¥–µ–ª–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω)
            if image.mode != 'RGBA':
                image = image.convert('RGBA')
            result = image
        else:  # –ú—É–ª—å—Ç—è—à–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏
            enhancer = ImageEnhance.Color(image)
            result = enhancer.enhance(1.3)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG
        output = io.BytesIO()
        result.save(output, format='PNG')
        output.seek(0)
        return output
        
    except Exception as e:
        logger.error(f"Pillow processing failed: {e}")
        # –ï—Å–ª–∏ Pillow –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        return io.BytesIO(image_data)

@bot.message_handler(func=lambda message: True)
def echo(message):
    bot.reply_to(message, 
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤! üì∑",
        reply_markup=create_keyboard()
    )

# –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.route('/webhook/' + TOKEN, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK', 200
    return 'Error', 403

@app.route('/')
def home():
    return "ü§ñ Sticker Bot is running with webhook!"

@app.route('/health')
def health():
    return "OK"

@app.route('/set_webhook')
def set_webhook():
    render_url = os.getenv('RENDER_EXTERNAL_URL')
    if not render_url:
        return "RENDER_EXTERNAL_URL not set"
    
    webhook_url = f"{render_url}/webhook/{TOKEN}"
    bot.remove_webhook()
    bot.set_webhook(url=webhook_url)
    return f"Webhook set to: {webhook_url}"

if __name__ == '__main__':
    print("üöÄ Starting sticker bot...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    render_url = os.getenv('RENDER_EXTERNAL_URL')
    if render_url:
        webhook_url = f"{render_url}/webhook/{TOKEN}"
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url)
        print(f"‚úÖ Webhook set to: {webhook_url}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    port = int(os.getenv('PORT', 10000))
    print(f"üåê Starting web server on port {port}...")
    app.run(host='0.0.0.0', port=port, debug=False)
